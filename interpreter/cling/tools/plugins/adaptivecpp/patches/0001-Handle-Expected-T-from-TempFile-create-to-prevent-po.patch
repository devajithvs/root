From 4ae08abfa7fa5b340efd8ca8225212ba85ca519e Mon Sep 17 00:00:00 2001
From: Devajith Valaparambil Sreeramaswamy
 <devajith.valaparambil.sreeramaswamy@cern.ch>
Date: Tue, 25 Feb 2025 11:17:35 +0100
Subject: [PATCH] Handle Expected<T> from TempFile::create() to prevent
 potential crashes

Add proper error handling for `TempFile::create()` by checking
`takeError()` for output files and ensure proper cleanup with
`discard()` and log errors

I get the following error without this change:

```
Expected<T> must be checked before access or destruction.
Expected<T> value was in success state. (Note: Expected<T> values in
success mode must still be checked prior to being destroyed).
```
---
 .../llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp    | 17 ++++++++---------
 .../llvm-to-backend/host/LLVMToHost.cpp        | 14 +++-----------
 src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp | 18 ++++++++++--------
 .../llvm-to-backend/spirv/LLVMToSpirv.cpp      | 15 +++++++++------
 4 files changed, 30 insertions(+), 34 deletions(-)

diff --git a/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp b/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp
index 54d5a0c4..307b3adf 100644
--- a/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp
+++ b/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp
@@ -92,7 +92,7 @@ bool getCommandOutput(const std::string &Program, const llvm::SmallVector<std::s
     return false;
   }
 
-  AtScopeExit DestroyOutputFile([&]() { auto Err = OutputFile->discard(); });
+  AtScopeExit DestroyOutputFile([&]() { consumeError(std::move(OutputFile->discard())); });
 
   llvm::SmallVector<llvm::StringRef> InvocationRef;
   for(const auto& S: Invocation)
@@ -423,24 +423,23 @@ bool LLVMToAmdgpuTranslator::clangJitLink(llvm::Module& FlavoredModule, std::str
   auto OutputFile = llvm::sys::fs::TempFile::create("acpp-sscp-amdgpu-%%%%%%.hipfb");
   auto DummyFile = llvm::sys::fs::TempFile::create("acpp-sscp-amdgpu-dummy-%%%%%%.cpp");
 
-  std::string OutputFilename = OutputFile->TmpName;
-
   auto checkFileError = [&](auto& F) {
     auto E = F.takeError();
     if(E){
-      this->registerError("LLVMToAmdgpu: Could not create temp file: "+InputFile->TmpName);
+      this->registerError("LLVMToAmdgpu: Could not create temp file: "+F->TmpName);
       return false;
     }
     return true;
   };
 
   if(!checkFileError(InputFile)) return false;
+  if(!checkFileError(OutputFile)) return false;
   if(!checkFileError(DummyFile)) return false;
 
-  AtScopeExit DestroyInputFile([&]() { auto Err = InputFile->discard(); });
-  AtScopeExit DestroyOutputFile([&]() { auto Err = OutputFile->discard(); });
-  AtScopeExit DestroyDummyFile([&]() { auto Err = DummyFile->discard(); });
-  
+  AtScopeExit DestroyInputFile([&]() { consumeError(std::move(InputFile->discard()));} );
+  AtScopeExit DestroyOutputFile([&]() { consumeError(std::move(OutputFile->discard())); });
+  AtScopeExit DestroyDummyFile([&]() { consumeError(std::move(DummyFile->discard())); });
+
   llvm::raw_fd_ostream InputStream{InputFile->FD, false};
   llvm::raw_fd_ostream DummyStream{DummyFile->FD, false};
 
@@ -457,7 +456,7 @@ bool LLVMToAmdgpuTranslator::clangJitLink(llvm::Module& FlavoredModule, std::str
   llvm::SmallVector<std::string> Invocation = {
       ClangPath, "-x", "hip", "-O3", "-nogpuinc", OffloadArchFlag, "--cuda-device-only",
         "-Xclang", "-mlink-bitcode-file", "-Xclang", InputFile->TmpName,
-        "-o",  OutputFilename, DummyFile->TmpName
+        "-o",  OutputFile->TmpName, DummyFile->TmpName
   };
 
   llvm::SmallVector<llvm::StringRef> InvocationRef;
diff --git a/src/compiler/llvm-to-backend/host/LLVMToHost.cpp b/src/compiler/llvm-to-backend/host/LLVMToHost.cpp
index 0a9dae7f..ea6dd859 100644
--- a/src/compiler/llvm-to-backend/host/LLVMToHost.cpp
+++ b/src/compiler/llvm-to-backend/host/LLVMToHost.cpp
@@ -124,16 +124,8 @@ bool LLVMToHostTranslator::translateToBackendFormat(llvm::Module &FlavoredModule
     return false;
   }
 
-  std::string OutputFilename = OutputFile->TmpName;
-
-  AtScopeExit DestroyInputFile([&]() {
-    if (InputFile->discard())
-      ;
-  });
-  AtScopeExit DestroyOutputFile([&]() {
-    if (OutputFile->discard())
-      ;
-  });
+  AtScopeExit DestroyInputFile([&]() {  consumeError(std::move(InputFile->discard())); });
+  AtScopeExit DestroyOutputFile([&]() {  consumeError(std::move(OutputFile->discard())); });
 
   std::error_code EC;
   llvm::raw_fd_ostream InputStream{InputFile->FD, false};
@@ -153,7 +145,7 @@ bool LLVMToHostTranslator::translateToBackendFormat(llvm::Module &FlavoredModule
                                                     "-Wno-pass-failed",
                                                     "-fPIC",
                                                     "-o",
-                                                    OutputFilename,
+                                                    OutputFile->TmpName,
                                                     InputFile->TmpName};
 
   std::string ArgString;
diff --git a/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp b/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp
index 74ea4f54..2b04a850 100644
--- a/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp
+++ b/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp
@@ -230,17 +230,19 @@ bool LLVMToPtxTranslator::translateToBackendFormat(llvm::Module &FlavoredModule,
 
   auto InputFile = llvm::sys::fs::TempFile::create("acpp-sscp-ptx-%%%%%%.bc");
   auto OutputFile = llvm::sys::fs::TempFile::create("acpp-sscp-ptx-%%%%%%.s");
-  
-  std::string OutputFilename = OutputFile->TmpName;
-  
-  auto E = InputFile.takeError();
-  if(E){
+
+  if (auto Err = InputFile.takeError()) {
     this->registerError("LLVMToPtx: Could not create temp file: "+InputFile->TmpName);
     return false;
   }
 
-  AtScopeExit DestroyInputFile([&]() { auto Err = InputFile->discard(); });
-  AtScopeExit DestroyOutputFile([&]() { auto Err = OutputFile->discard(); });
+  if (auto Err = OutputFile.takeError()) {
+    this->registerError("LLVMToPtx: Could not create temp file: " + OutputFile->TmpName);
+    return false;
+  }
+
+  AtScopeExit DestroyInputFile([&]() { consumeError(std::move(InputFile->discard())); });
+  AtScopeExit DestroyOutputFile([&]() { consumeError(std::move(OutputFile->discard()));});
 
   std::error_code EC;
   llvm::raw_fd_ostream InputStream{InputFile->FD, false};
@@ -265,7 +267,7 @@ bool LLVMToPtxTranslator::translateToBackendFormat(llvm::Module &FlavoredModule,
                                                     "-x",
                                                     "ir",
                                                     "-o",
-                                                    OutputFilename,
+                                                    OutputFile->TmpName,
                                                     InputFile->TmpName};
   if(IsFastMath)
     Invocation.push_back("-ffast-math");
diff --git a/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp b/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
index e50040bb..4e2cea81 100644
--- a/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
+++ b/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
@@ -223,16 +223,19 @@ bool LLVMToSpirvTranslator::translateToBackendFormat(llvm::Module &FlavoredModul
   auto InputFile = llvm::sys::fs::TempFile::create("acpp-sscp-spirv-%%%%%%.bc");
   auto OutputFile = llvm::sys::fs::TempFile::create("acpp-sscp-spirv-%%%%%%.spv");
   
-  std::string OutputFilename = OutputFile->TmpName;
-  
   auto E = InputFile.takeError();
-  if(E){
+  if (auto Err = InputFile.takeError()) {
     this->registerError("LLVMToSpirv: Could not create temp file: "+InputFile->TmpName);
     return false;
   }
 
-  AtScopeExit DestroyInputFile([&]() { auto Err = InputFile->discard(); });
-  AtScopeExit DestroyOutputFile([&]() { auto Err = OutputFile->discard(); });
+  if (auto Err = OutputFile.takeError()) {
+    this->registerError("LLVMToPtx: Could not create temp file: " + OutputFile->TmpName);
+    return false;
+  }
+
+  AtScopeExit DestroyInputFile([&]() { consumeError(std::move(InputFile->discard())); });
+  AtScopeExit DestroyOutputFile([&]() { consumeError(std::move(OutputFile->discard())); });
 
   std::error_code EC;
   llvm::raw_fd_ostream InputStream{InputFile->FD, false};
@@ -245,7 +248,7 @@ bool LLVMToSpirvTranslator::translateToBackendFormat(llvm::Module &FlavoredModul
 
 
   llvm::SmallVector<std::string> Args{
-      "-o=" + OutputFilename
+      "-o=" + OutputFile->TmpName
   };
   if(UseIntelLLVMSpirvArgs)
     appendIntelLLVMSpirvOptions(Args);
-- 
2.43.5

